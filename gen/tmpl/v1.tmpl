package {{ .outPkg }}

// Code generated by sqlgen, please add your function in {{ .extFile }}

import (
	"context"
	"fmt"

	"github.com/huandu/go-sqlbuilder"

	{{ .dbHelperPkg }}
	{{ .ecmLogPkg }}
)

// {{ .ormName }} ORM object to {{ .fullName }}
var {{ .ormName }} = dbhelper.NewStruct({{ .fullName }}{})

// Add{{ .structName }} ...
func Add{{ .structName }}(ctx context.Context, way, tag string, objects ...interface{}) error {
	var b *sqlbuilder.InsertBuilder
	switch way {
	case dbhelper.Insert:
		b = {{ .ormName }}.InsertIntoForTag({{ .table }}, tag, objects...)
	case dbhelper.InsertIgnore:
		b = {{ .ormName }}.InsertIgnoreIntoForTag({{ .table }}, tag, objects...)
	case dbhelper.Replace:
		b = {{ .ormName }}.ReplaceIntoForTag({{ .table }}, tag, objects...)
	default:
		return fmt.Errorf("invalid insert way: %s", way)
	}

	expr, args := b.Build()
	if _, err := {{ .ormName }}.Exec(ctx, {{ .db }}, expr, args...); err != nil {
		ecmlog.ErrorEx(ctx, "Exec failed", "err", err)
		return err
	}
	return nil
}

// Delete{{ .structName }} ...
func Delete{{ .structName }}(ctx context.Context, cond dbhelper.DelCondFunc) error {
	b := {{ .ormName }}.DeleteFrom({{ .table }})
	cond(b)

	expr, args := b.Build()
	if _, err := {{ .ormName }}.Exec(ctx, {{ .db }}, expr, args...); err != nil {
		ecmlog.ErrorEx(ctx, "Exec failed", "err", err)
		return err
	}
	return nil
}

// Update{{ .structName }} ...
func Update{{ .structName }}(ctx context.Context, cond dbhelper.UpdateCondFunc) error {
	b := sqlbuilder.NewUpdateBuilder().Update({{ .table }})
	cond(b)

	expr, args := b.Build()
	if _, err := {{ .ormName }}.Exec(ctx, {{ .db }}, expr, args...); err != nil {
		ecmlog.ErrorEx(ctx, "Exec failed", "err", err)
		return err
	}
	return nil
}

// GetTag{{ .structName }} ...
func GetTag{{ .structName }}(ctx context.Context, tag string, cond dbhelper.CondFunc) (*{{ .fullName }}, error) {
	b := {{ .ormName }}.SelectFromForTag({{ .table }}, tag)
	cond(b)

	var result {{ .fullName }}
	expr, args := b.Build()
	if err := {{ .ormName }}.TagQueryRow(ctx, {{ .db }}, &result, tag, expr, args...); err != nil {
		ecmlog.ErrorEx(ctx, "TagQueryRow failed", "err", err)
		return nil, err
	}
	return &result, nil
}

// Get{{ .structName }} ...
func Get{{ .structName }}(ctx context.Context, cond dbhelper.CondFunc) (*{{ .fullName }}, error) {
	return GetTag{{ .structName }}(ctx, "", cond)
}

// PullTag{{ .structName }} ...
func PullTag{{ .structName }}(ctx context.Context, tag string, cond dbhelper.CondFunc) ([]{{ .fullName }}, error) {
	b := {{ .ormName }}.SelectFromForTag({{ .table }}, tag)
	cond(b)

	var result []{{ .fullName }}
	expr, args := b.Build()
	if err := {{ .ormName }}.TagQuery(ctx, {{ .db }}, &result, tag, expr, args...); err != nil {
		ecmlog.ErrorEx(ctx, "TagQuery failed", "err", err)
		return nil, err
	}
	return result, nil
}

// Pull{{ .structName }} ...
func Pull{{ .structName }}(ctx context.Context, cond dbhelper.CondFunc) ([]{{ .fullName }}, error) {
	return PullTag{{ .structName }}(ctx, "", cond)
}

{{ range $m, $t := .converters }}// Map{{$m}}To{{$.structName}} ...
func Map{{$m}}To{{$.structName}}(objs []{{ $.fullName }}, err error) (map[{{$t}}]*{{ $.fullName }}, error) {
	if err != nil {
		return nil, err
	}

	result := make(map[{{$t}}]*{{ $.fullName }}, len(objs))
	for i := range objs {
		result[objs[i].{{$m}}] = &objs[i]
	}
	return result, nil
}

{{ end -}}

{{ range $m, $t := .groupers }}// Group{{$.structName}}By{{$m}} ...
func Group{{$.structName}}By{{$m}}(objs []{{ $.fullName }}, err error) (map[{{$t}}][]{{ $.fullName }}, error) {
	if err != nil {
		return nil, err
	}

	result := make(map[{{$t}}][]{{ $.fullName }})
	for i := range objs {
		result[objs[i].{{$m}}] = append(result[objs[i].{{$m}}], objs[i])
	}
	return result, nil
}

{{ end -}}
